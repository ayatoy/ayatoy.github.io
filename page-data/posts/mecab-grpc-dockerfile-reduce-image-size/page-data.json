{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/mecab-grpc-dockerfile-reduce-image-size","result":{"data":{"markdownRemark":{"id":"8bcf2773-d44c-57a1-aa16-66a2a8290d8d","html":"<p><a href=\"mecab-grpc-dockerfile\">この前</a>作ったMeCabのgRPCサーバ(<a href=\"https://github.com/ayatoy/mecab-grpc\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">mecab-grpc</a>)のDockerイメージサイズが1.27GBとそこそこの大きさなので出来る限りサイズを小さくしてみたいと思います。</p>\n<h2 id=\"dockerfile\" style=\"position:relative;\"><a href=\"#dockerfile\" aria-label=\"dockerfile permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dockerfile</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">FROM python:3.5.6-alpine3.9\nLABEL Name=mecab-grpc Version=1.0.0\n\nRUN apk add --no-cache git make g++ swig\n\nWORKDIR /\nRUN git clone https://github.com/taku910/mecab.git\nWORKDIR /mecab/mecab\nRUN ./configure --enable-utf8-only \\\n    &amp;&amp; make \\\n    &amp;&amp; make check \\\n    &amp;&amp; make install\n\nWORKDIR /mecab/mecab-ipadic\nRUN ./configure --with-charset=utf8 \\\n    &amp;&amp; make \\\n    &amp;&amp; make install\n\nWORKDIR /mecab/mecab-jumandic\nRUN ./configure --with-charset=utf8 \\\n    &amp;&amp; make \\\n    &amp;&amp; make install\n\nCOPY . /mecab-grpc\nWORKDIR /mecab-grpc\nRUN python -m pip install --upgrade pip \\\n    &amp;&amp; python -m pip install -r requirements.txt \\\n    &amp;&amp; sh protoc-gen.sh\n\nCMD [&quot;python&quot;, &quot;server.py&quot;]</code></pre></div>\n<p>現状はこんな感じ。ベースイメージは既にalpineを使っているので、ベースイメージはそのままで不要なパッケージを削除したりレイヤー数を抑えたりする感じになると思います。(頑張ればマルチステージビルドとdistrolessみたいな方向性で極限まで削れるんだろうけど、今回のケースは手間に対して得られる効果が薄そうなのでalpineと古典的な削減方法で妥協)</p>\n<h2 id=\"調べる\" style=\"position:relative;\"><a href=\"#%E8%AA%BF%E3%81%B9%E3%82%8B\" aria-label=\"調べる permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>調べる</h2>\n<p>削減の方法はググればいっぱい出てくる。実際に作業する前に調べて得たポイントを書き出してみる。</p>\n<ul>\n<li>小さいベースイメージを使う</li>\n<li>レイヤーの数を最小限にする</li>\n<li>デバッグ用のツールをインストールしない</li>\n<li>不要になったツールは同じレイヤーで削除</li>\n<li>適切な <code class=\"language-text\">.dockerignore</code></li>\n<li><code class=\"language-text\">apt-get install -y --no-install-recommends …</code></li>\n<li><code class=\"language-text\">rm -rf /var/lib/apt/lists/*</code></li>\n<li><code class=\"language-text\">apt-get purge -y --auto-remove …</code></li>\n<li><code class=\"language-text\">apk add --no-cache …</code></li>\n<li><code class=\"language-text\">apk add —-virtual …</code></li>\n<li><code class=\"language-text\">apk del --purge …</code></li>\n</ul>\n<p>どのサイトもこんな感じで同じようなことを言ってた。まとめると、</p>\n<ul>\n<li>アプリの動作にとって不要なものはインストールしない</li>\n<li>ツール(とかソース、キャッシュ、その他一時的なファイル)の追加と削除は1つのコンテキストと考えて、1つのレイヤーで完結させる</li>\n</ul>\n<p>という感じだと思う。</p>\n<h2 id=\"やってみる\" style=\"position:relative;\"><a href=\"#%E3%82%84%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B\" aria-label=\"やってみる permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>やってみる</h2>\n<p>まずどのレイヤーでどのくらいサイズが増えているのか見たいので <code class=\"language-text\">docker history</code> をする。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">IMAGE               CREATED             CREATED BY                                      SIZE                COMMENT\n67eb23360bbf        4 hours ago         /bin/sh -c #(nop)  CMD [&quot;python&quot; &quot;server.py&quot;]   0B\n2978157db9ba        4 hours ago         /bin/sh -c python -m pip install --upgrade p…   216MB\nad947e372dde        4 hours ago         /bin/sh -c #(nop) WORKDIR /mecab-grpc           0B\n6842b17a252e        4 hours ago         /bin/sh -c #(nop) COPY dir:7ff7416db8e5d3d9d…   3.85kB\nb7a768bcc5b6        4 hours ago         /bin/sh -c ./configure --with-charset=utf8  …   297MB\nf08be6cb767a        4 hours ago         /bin/sh -c #(nop) WORKDIR /mecab/mecab-juman…   0B\ndb55cd3ac0c1        4 hours ago         /bin/sh -c ./configure --with-charset=utf8  …   106MB\n33cd77a79206        4 hours ago         /bin/sh -c #(nop) WORKDIR /mecab/mecab-ipadic   0B\nc77fe2139ae9        4 hours ago         /bin/sh -c ./configure --enable-utf8-only   …   10.7MB\n05277449a505        4 hours ago         /bin/sh -c #(nop) WORKDIR /mecab/mecab          0B\n1c7466774cb7        4 hours ago         /bin/sh -c git clone https://github.com/taku…   379MB\nb5e81d428587        4 hours ago         /bin/sh -c #(nop) WORKDIR /                     0B\n7471a9d7fcf5        4 hours ago         /bin/sh -c apk add --no-cache git make g++ s…   188MB\n3201b5481ba9        4 hours ago         /bin/sh -c #(nop)  LABEL Name=mecab-grpc Ver…   0B\nbe8ce886a36a        6 days ago          /bin/sh -c #(nop)  CMD [&quot;python3&quot;]              0B\n&lt;missing&gt;           6 days ago          /bin/sh -c set -ex;   wget -O get-pip.py &#39;ht…   6.04MB\n&lt;missing&gt;           6 days ago          /bin/sh -c #(nop)  ENV PYTHON_PIP_VERSION=19…   0B\n&lt;missing&gt;           3 weeks ago         /bin/sh -c cd /usr/local/bin  &amp;&amp; ln -s idle3…   32B\n&lt;missing&gt;           3 weeks ago         /bin/sh -c set -ex  &amp;&amp; apk add --no-cache --…   61.8MB\n&lt;missing&gt;           3 weeks ago         /bin/sh -c #(nop)  ENV PYTHON_VERSION=3.5.6     0B\n&lt;missing&gt;           3 weeks ago         /bin/sh -c #(nop)  ENV GPG_KEY=97FC712E4C024…   0B\n&lt;missing&gt;           3 weeks ago         /bin/sh -c apk add --no-cache ca-certificates   551kB\n&lt;missing&gt;           3 weeks ago         /bin/sh -c #(nop)  ENV LANG=C.UTF-8             0B\n&lt;missing&gt;           3 weeks ago         /bin/sh -c #(nop)  ENV PATH=/usr/local/bin:/…   0B\n&lt;missing&gt;           4 weeks ago         /bin/sh -c #(nop)  CMD [&quot;/bin/sh&quot;]              0B\n&lt;missing&gt;           4 weeks ago         /bin/sh -c #(nop) ADD file:2a1fc9351afe35698…   5.53MB</code></pre></div>\n<p>サイズが増えているところをピックアップして見てゆく。</p>\n<p><code class=\"language-text\">apk add</code> しているところで188MB増。 <code class=\"language-text\">g++</code> パッケージ以外( <code class=\"language-text\">git</code>、<code class=\"language-text\">make</code>、<code class=\"language-text\">swig</code> )はビルド&#x26;インストールする時しか必要ないので使い終わったら削除できる。( <code class=\"language-text\">g++</code> にはロードされる共有ライブラリが含まれる。あとコンパイラも含まれてるから改善の余地あり)</p>\n<p>MeCabのリポジトリをクローンしているところで379MB増。これはMeCab本体と辞書のインストールが終わったら必要なくなるので削除できる。</p>\n<p>MeCab本体のインストールで10.7MB増、ipadicのインストールで106MB増、jumandicのインストールで297MB増。jumandicは正直使ったことが無いので削除。(辞書は人それぞれ。というか辞書によってはサイズが爆増するので、イメージサイズを頑張って削減するぞ！的な試みがほぼ無意味になるという)</p>\n<p>最後に <code class=\"language-text\">pip</code> のアップグレードと依存パッケージのインストールとgRPCのスタブ諸々の生成で216MB増。そもそも <code class=\"language-text\">pip</code> はベースイメージの段階で最新のバージョンが入るっぽいからアップグレードは必要ない(削減とはあまり関係ないけど)。あとは依存パッケージのインストール時に <code class=\"language-text\">pip</code> のキャッシュを作らないために <code class=\"language-text\">--no-cache-dir</code> を追加する。</p>\n<p>というわけで、書き直した Dockerfile が以下。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">FROM python:3.5.6-alpine3.9\nLABEL Name=mecab-grpc Version=1.0.0\n\nCOPY . /opt/mecab-grpc\n\nRUN set -x \\\n    &amp;&amp; apk add --no-cache --virtual .run-deps \\\n        g++ \\\n    \\\n    &amp;&amp; apk add --no-cache --virtual .build-deps \\\n        git \\\n        make \\\n        swig \\\n    \\\n    &amp;&amp; mkdir -p /usr/local/src \\\n    &amp;&amp; cd /usr/local/src \\\n    &amp;&amp; git clone https://github.com/taku910/mecab.git \\\n    \\\n    &amp;&amp; cd /usr/local/src/mecab/mecab \\\n    &amp;&amp; ./configure --enable-utf8-only &amp;&amp; make &amp;&amp; make check &amp;&amp; make install \\\n    \\\n    &amp;&amp; cd /usr/local/src/mecab/mecab-ipadic \\\n    &amp;&amp; ./configure --with-charset=utf8 &amp;&amp; make &amp;&amp; make check &amp;&amp; make install \\\n    \\\n    &amp;&amp; cd /opt/mecab-grpc \\\n    &amp;&amp; pip install \\\n        --disable-pip-version-check \\\n        --no-cache-dir \\\n        -r requirements.txt \\\n    &amp;&amp; sh protoc-gen.sh \\\n    \\\n    &amp;&amp; apk del --purge .build-deps \\\n    &amp;&amp; rm -rf /usr/local/src/mecab\n\nWORKDIR /opt/mecab-grpc\nCMD [&quot;python&quot;, &quot;server.py&quot;]</code></pre></div>\n<p>いくつかに分散していた <code class=\"language-text\">RUN</code> と <code class=\"language-text\">WORKDIR</code> が1つ <code class=\"language-text\">RUN</code> にまとまっている(その都合上 <code class=\"language-text\">COPY</code> を <code class=\"language-text\">RUN</code> の前に持ってくる)。 <code class=\"language-text\">RUN</code> の中ではまず <code class=\"language-text\">set -x</code> をする。これで単一の <code class=\"language-text\">RUN</code> で複数のコマンドを実行する時の出力が見やすくなる。公式のDockerfileがやってるのを真似した(サブシェルとかパイプを使う場合は <code class=\"language-text\">set -ex</code> としたり)。</p>\n<p><code class=\"language-text\">apt add</code> では <code class=\"language-text\">--virtual</code> でパッケージ群の意図の把握と管理がしやすいように名前を付ける。( <code class=\"language-text\">.run-deps</code> は後で何かをするわけじゃないけど、今回は分かりやすいようにあえて)</p>\n<p>MeCab本体と辞書のインストールは特に変わらない(jumandicは削除)。 <code class=\"language-text\">pip</code> はバージョンチェックのスキップをするために <code class=\"language-text\">--disable-pip-version-check</code> を追加(新しいバージョンの <code class=\"language-text\">pip</code> があるぜ的なメッセージを出さないために)。 <code class=\"language-text\">--no-cache-dir</code> は上述の通り。</p>\n<p>そんで <code class=\"language-text\">RUN</code> の最後に忘れずに <code class=\"language-text\">apk del</code> で <code class=\"language-text\">.build-deps</code> を削除して、MeCabのソースコードも削除。</p>\n<p>こんな感じでイメージサイズの合計が442MB。約1/3に削減できた。</p>","fields":{"slug":"/posts/mecab-grpc-dockerfile-reduce-image-size","tagSlugs":["/tag/docker/"]},"frontmatter":{"date":"2019-03-04T00:00+09:00","description":"この前作ったMeCabのgRPCサーバのDockerイメージサイズが1.27GBとそこそこの大きさなので出来る限りサイズを小さくしてみたいと思います。","tags":["Docker"],"title":"Dockerのイメージサイズを削減する","socialImage":null}}},"pageContext":{"slug":"/posts/mecab-grpc-dockerfile-reduce-image-size"}}}