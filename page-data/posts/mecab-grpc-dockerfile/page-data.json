{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/mecab-grpc-dockerfile","result":{"data":{"markdownRemark":{"id":"48d3f476-2549-5bea-950b-0df950ea3d74","html":"<p>MeCabの環境を整えるのが面倒なのと(必要になる度に忘れて調べ直したり)、複数の言語からMeCabを使いたい場合はサーバにした方が楽そうなので作りました。インターフェイス的にはREST APIやらJSON-RPCやら色々考えられますが、スキーマがあって長い目で見ると色々と楽だったり、パフォーマンスが出たり、gRPCの人気自体が今後伸びそうだったり、等の理由でgRPCを採用しました。</p>\n<h2 id=\"今回の成果物\" style=\"position:relative;\"><a href=\"#%E4%BB%8A%E5%9B%9E%E3%81%AE%E6%88%90%E6%9E%9C%E7%89%A9\" aria-label=\"今回の成果物 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>今回の成果物</h2>\n<p><a href=\"https://github.com/ayatoy/mecab-grpc\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/ayatoy/mecab-grpc</a></p>\n<h2 id=\"プロジェクトの構造\" style=\"position:relative;\"><a href=\"#%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E6%A7%8B%E9%80%A0\" aria-label=\"プロジェクトの構造 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>プロジェクトの構造</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">├── .dockerignore\n├── .gitignore\n├── Dockerfile\n├── LICENSE\n├── README.md\n├── mecab.proto\n├── protoc-gen.sh\n├── requirements.txt\n├── server.py\n└── test_server.py</code></pre></div>\n<p>主要なものは <code class=\"language-text\">mecab.proto</code>、<code class=\"language-text\">server.py</code>、<code class=\"language-text\">Dockerfile</code> の3つのみ。 <code class=\"language-text\">protoc-gen.sh</code> は <code class=\"language-text\">mecab.proto</code> からスタブ等を生成するために <code class=\"language-text\">grpc_tools.protoc</code> を呼び出しているだけ。 <code class=\"language-text\">test_server.py</code> は <code class=\"language-text\">pytest</code> から呼び出されるテスト。残りはおまけ。</p>\n<h2 id=\"mecabproto\" style=\"position:relative;\"><a href=\"#mecabproto\" aria-label=\"mecabproto permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>mecab.proto</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">syntax = &quot;proto3&quot;;\n\npackage mecab;\n\nservice Parser {\n    rpc Parse (ParseRequest) returns (ParseResponse) {}\n}\n\nmessage ParseRequest {\n    repeated string sentences = 1;\n    string dictionary = 2;\n}\n\nmessage ParseResponse {\n    repeated Sentence sentences = 1;\n}\n\nmessage Sentence {\n    repeated Word words = 1;\n}\n\nmessage Word {\n    string surface = 1;\n    repeated string feature = 2;\n}</code></pre></div>\n<p>単純。 <code class=\"language-text\">Parser</code> という1つのサービスに <code class=\"language-text\">Parse</code> というRPCが1つ定義されているだけ。 <code class=\"language-text\">Parse</code> は <code class=\"language-text\">ParseRequest</code> を受け取って\n<code class=\"language-text\">ParseResponse</code> を返す。 <code class=\"language-text\">ParseRequest</code> は解析したい文字列のリスト <code class=\"language-text\">sentences</code> と、 <code class=\"language-text\">sentences</code> のそれぞれの文字列を解析する際に使用する辞書を指定するための <code class=\"language-text\">dictionary</code> を持つ。 <code class=\"language-text\">ParseResponse</code> は <code class=\"language-text\">ParseRequest</code> で渡した文字列のリストのそれぞれの要素に対応した解析結果 <code class=\"language-text\">Sentence</code> のリストを元の順序を保ったまま保持する。 <code class=\"language-text\">Sentence</code> には分解された単語 <code class=\"language-text\">Word</code> のリスト、 <code class=\"language-text\">Word</code> には <code class=\"language-text\">surface</code> と品詞などの情報を含む <code class=\"language-text\">feature</code> をそれぞれ持つ。</p>\n<h2 id=\"serverpy\" style=\"position:relative;\"><a href=\"#serverpy\" aria-label=\"serverpy permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>server.py</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">from concurrent import futures\nimport os\nimport os.path\nimport subprocess\nimport threading\nimport time\n\nimport MeCab\nimport grpc\n\nfrom mecab_pb2 import ParseResponse, Sentence, Word\nfrom mecab_pb2_grpc import ParserServicer, add_ParserServicer_to_server\n\n_ONE_DAY_IN_SECONDS = 60 * 60 * 24\n\n_HOST = os.environ.get(&#39;MECAB_GRPC_HOST&#39;, &#39;[::]&#39;)\n_PORT = os.environ.get(&#39;MECAB_GRPC_PORT&#39;, &#39;50051&#39;)\n_ADDRESS = _HOST + &#39;:&#39; + _PORT\n\n\nclass Environment:\n\n    def __init__(self, default_dictionary=&#39;ipadic&#39;):\n        self.dictionary_directory = subprocess.check_output([&#39;mecab-config&#39;, &#39;--dicdir&#39;]).decode(&#39;utf-8&#39;).split(&#39;\\n&#39;)[0]\n        if not self.dictionary_directory:\n            raise Exception(&#39;Invalid Directory: %r&#39; % self.dictionary_directory)\n        self.default_dictionary = default_dictionary\n        self.dictionaries = set(os.listdir(self.dictionary_directory))\n        self.taggers = threading.local()\n\n    def get_tagger(self, dictionary):\n        if dictionary not in self.dictionaries:\n            dictionary = self.default_dictionary\n        tagger = getattr(self.taggers, dictionary, None)\n        if tagger is None:\n            tagger = MeCab.Tagger(&#39;-d %s&#39; % os.path.join(self.dictionary_directory, dictionary))\n            # For bug that node.surface can not be obtained with Python3.\n            tagger.parse(&#39;&#39;)\n            setattr(self.taggers, dictionary, tagger)\n        return tagger\n\n\nclass Parser(ParserServicer):\n\n    def __init__(self, environment):\n        self.environment = environment\n\n    def Parse(self, request, context):\n        sentence_texts = request.sentences\n        dictionary = request.dictionary\n        tagger = self.environment.get_tagger(dictionary)\n        sentences = []\n        for sentence_text in sentence_texts:\n            words = []\n            for row in tagger.parse(sentence_text).split(&#39;\\n&#39;)[:-2]:\n                cols = row.split(&#39;\\t&#39;)\n                words.append(Word(\n                    surface=cols[0],\n                    feature=cols[1].split(&#39;,&#39;),\n                ))\n            sentences.append(Sentence(words=words))\n        return ParseResponse(sentences=sentences)\n\n\ndef serve():\n    environment = Environment()\n    server = grpc.server(futures.ThreadPoolExecutor())\n    add_ParserServicer_to_server(Parser(environment), server)\n    server.add_insecure_port(_ADDRESS)\n    server.start()\n    try:\n        while True:\n            time.sleep(_ONE_DAY_IN_SECONDS)\n    except KeyboardInterrupt:\n        server.stop(0)\n\n\nif __name__ == &#39;__main__&#39;:\n    serve()</code></pre></div>\n<p>これも単純。ほぼチュートリアルに毛が生えた程度。まずプログラムは <code class=\"language-text\">MECAB_GRPC_HOST</code> と <code class=\"language-text\">MECAB_GRPC_PORT</code> という2つの環境変数を読み取る。それぞれは <code class=\"language-text\">_HOST</code> と <code class=\"language-text\">_PORT</code> という変数に(環境変数が存在しない場合はデフォルト値を伴って)格納され、 <code class=\"language-text\">_ADDRESS</code> という変数に結合された状態で保持され、後で <code class=\"language-text\">server.add_insecure_port()</code> に渡される。</p>\n<p>クラス <code class=\"language-text\">Environment</code> はインストールされたMeCabの環境を抽象化したモノ(のつもり)。インスタンスが作られると <code class=\"language-text\">mecab-config</code> のプロセスを使って辞書周りのディレクトリを読み取って、システムに存在する辞書を認識する。また、ワーカースレッドごとにTaggerをキャッシュするために <code class=\"language-text\">self.taggers</code> に <code class=\"language-text\">local</code> オブジェクトを保持する。 <code class=\"language-text\">get_tagger</code> メソッドは辞書の名前を受け取ってそれに対応するTaggerを返す(キャッシュが存在する場合はそちらを返す)。</p>\n<p>クラス <code class=\"language-text\">Parser</code> はgRPCサービスの実装(protocで作られた <code class=\"language-text\">ParserServicer</code> を継承)。コンストラクタから <code class=\"language-text\">Environment</code> のインスタンスを受け取って <code class=\"language-text\">self.environment</code> に保持。 <code class=\"language-text\">Parse</code> メソッドはRPCの本体。 <code class=\"language-text\">ParseRequest</code> のオブジェクトを受け取り <code class=\"language-text\">self.environment.get_tagger()</code> を呼び出してTaggerを取得し、 <code class=\"language-text\">request.sentences</code> のそれぞれの文字列を <code class=\"language-text\">tagger.parse()</code> に渡して出力された文字列を泥臭く分解して( <code class=\"language-text\">tagger.parseToNode()</code> を使うパターンもあるけど、自分の用途では今の所単語の <code class=\"language-text\">surface</code> と品詞が分かれば良いので <code class=\"language-text\">tagger.parse()</code> で十分)、 <code class=\"language-text\">Word</code>、<code class=\"language-text\">Sentence</code>、<code class=\"language-text\">ParseResponse</code> を構成して <code class=\"language-text\">return</code> 。</p>\n<p><code class=\"language-text\">serve()</code> はチュートリアルとほぼ同じ。違うのは <code class=\"language-text\">Environment</code> のインスタンスを作って <code class=\"language-text\">Parser</code> に渡してるくらい。あとスレッドプールのワーカ数をPythonのデフォルト(プロセッサの数x5)にしてるとこ(これは環境変数とかでパラメータを受け取って調整できるようにしても良いと思う)。</p>\n<h2 id=\"dockerfile\" style=\"position:relative;\"><a href=\"#dockerfile\" aria-label=\"dockerfile permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dockerfile</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">FROM python:3.5.6-alpine3.9\nLABEL Name=mecab-grpc Version=1.0.0\n\nRUN apk add --no-cache git make g++ swig\n\nWORKDIR /\nRUN git clone https://github.com/taku910/mecab.git\nWORKDIR /mecab/mecab\nRUN ./configure --enable-utf8-only \\\n    &amp;&amp; make \\\n    &amp;&amp; make check \\\n    &amp;&amp; make install\n\nWORKDIR /mecab/mecab-ipadic\nRUN ./configure --with-charset=utf8 \\\n    &amp;&amp; make \\\n    &amp;&amp; make install\n\nWORKDIR /mecab/mecab-jumandic\nRUN ./configure --with-charset=utf8 \\\n    &amp;&amp; make \\\n    &amp;&amp; make install\n\nCOPY . /mecab-grpc\nWORKDIR /mecab-grpc\nRUN python -m pip install --upgrade pip \\\n    &amp;&amp; python -m pip install -r requirements.txt \\\n    &amp;&amp; sh protoc-gen.sh\n\nCMD [&quot;python&quot;, &quot;server.py&quot;]</code></pre></div>\n<p>ベースイメージは <code class=\"language-text\">python:3.5.6-alpine3.9</code> 。Pythonが3.5なのは、3.6と3.7だと自分の手元の環境ではgRPC周りでエラーが出たから(後で調べようの精神。動かすことを優先)。そんでapkで必要なパッケージを入れて(mecab-python3が0.996.1からswigを必要とする)、 MeCab本体と付属の辞書をインストール(mecab-ipadic-NEologdとかその他の辞書が必要な場合は、各々入れるだけで <code class=\"language-text\">ParseRequest</code> で指定してそのまま動くと思う)。最後にmecab-grpcに必要なものを <code class=\"language-text\">pip install -r requirements.txt</code> した後に <code class=\"language-text\">sh protoc-gen.sh</code> でスタブ諸々を生成して終わり。</p>\n<p>イメージサイズの削減はalpineを使う以外は特にしていないのでまた今度。<br>\n(追記:<a href=\"mecab-grpc-dockerfile-reduce-image-size\">Dockerのイメージサイズを削減する</a>)</p>\n<h2 id=\"参考\" style=\"position:relative;\"><a href=\"#%E5%8F%82%E8%80%83\" aria-label=\"参考 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>参考</h2>\n<ul>\n<li><a href=\"https://www.python.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Python</a></li>\n<li><a href=\"https://taku910.github.io/mecab/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">MeCab</a></li>\n<li><a href=\"https://grpc.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">gRPC</a></li>\n<li><a href=\"https://developers.google.com/protocol-buffers/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Protocol Buffers</a></li>\n<li><a href=\"https://www.docker.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Docker</a></li>\n</ul>","fields":{"slug":"/posts/mecab-grpc-dockerfile","tagSlugs":["/tag/docker/","/tag/g-rpc/","/tag/me-cab/","/tag/protocol-buffers/","/tag/python/"]},"frontmatter":{"date":"2019-02-27T00:00+09:00","description":"MeCabの環境を整えるのが面倒なのと(必要になる度に忘れて調べ直したり)、複数の言語からMeCabを使いたい場合はサーバにした方が楽そうなので作りました。インターフェイス的にはREST APIやらJSON-RPCやら色々考えられますが、スキーマがあって長い目で見ると色々と楽だったり、パフォーマンスが出たり、gRPCの人気自体が今後伸びそうだったり、等の理由でgRPCを採用しました。","tags":["Docker","gRPC","MeCab","Protocol Buffers","Python"],"title":"MeCabのgRPCサーバを作る","socialImage":null}}},"pageContext":{"slug":"/posts/mecab-grpc-dockerfile"}}}